import (
    "std.um"
    "input.um"
    "/api/vfs.um"
    "/api/rw.um"
    "/user/user.um"
)

fn outputConsole*(data: ^void, size: uint) {
}

fn init*() {
    upvalue := "cheese"

    vfs::hookFlush(std::stdout(), |upvalue| {
        s := rw::reads(data, size)
        if s[0] == '\n' { user::output( sprintf(" [Upvalue %v]", upvalue) + s) } else { user::output(s) }
    })

    upvalue = "ham"

    vfs::hookFlush(std::stderr(), |upvalue| {
        s := rw::reads(data, size)
        if s[0] == '\n' { user::output(sprintf(" [Upvalue %v]", upvalue) + s) } else { user::output(s) }
    })


    fprintf(std::stderr(), "Hello from stderr.\n")
    input::init()
    user::init()
}

fn irq*(irq: uint8, bytes: []uint8) {
    input::irq(irq, bytes)
}

fn schedule*() {
    user::schedule()
}